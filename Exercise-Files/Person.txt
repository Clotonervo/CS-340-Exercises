1. What design principles does this code violate?
2. Refactor the code to improve its design.

Person.java

public class Person {
    public String last;
    public String first;
    public String middle;

    public Person(String last, String first, String middle) {
        this.last = last;
        this.first = first;
        this.middle = middle;
    }
}

PersonClient.java

// The clients are in one file for convenience;
// imagine them as non-test methods in separate client classes.

import junit.framework.TestCase;

import java.io.*

public class PersonClient extends TestCase {
    public PersonClient(String name) {super(name);}

    public void client1(Writer out, Person person) throws IOException {
        out.write(person.first);
        out.write(" ");
        if (person.middle != null) {
            out.write(person.middle);
            out.write(" ");
        }
        out.write(person.last);
    }

    public String client2(Person person) {
        String result = person.last + ", " + person.first;
        if (person.middle != null)
            result += " " + person.middle;
        return result;
    }

    public void client3(Writer out, Person person) throws IOException {
        out.write(person.last);
        out.write(", ");
        out.write(person.first);
        if (person.middle != null) {
            out.write(" ");
            out.write(person.middle);
        }
    }

    public String client4(Person person) {
        return person.last + ", " +
               person.first +
               ((person.middle == null) ? "" : " " + person.middle);
    }

    public void testClients() throws IOException {
        Person bobSmith = new Person("Smith", "Bob", null);
        Person jennyJJones = new Person("Jones", "Jenny", "J");
        StringWriter out = new StringWriter();
        client1(out, bobSmith);
        assertEquals("Bob Smith", out.toString());

        out = new StringWriter();
        client1(out, jennyJJones);
        assertEquals("Jenny J Jones", out.toString());

        assertEquals("Smith, Bob", client2(bobSmith));
        assertEquals("Jones, Jenny J", client2(jennyJJones));

        out = new StringWriter();
        client3(out, bobSmith);
        assertEquals("Smith, Bob", out.toString());

        out = new StringWriter();
        client3(out, jennyJJones);
        assertEquals("Jones, Jenny J", out.toString());

        assertEquals("Smith, Bob", client4(bobSmith));
        assertEquals("Jones, Jenny J", client4(jennyJJones));
    }
}


1. Information hiding, all the variables in the person class are public. Naming conventions for the different functions are also terrible and don't help the programmer understand what is happening. No single responsibility because some of the functions do the exact same thing. Also duplication is an issue with some of the functions. We should remove duplication, and I chose to keep the functions that took in a writer so that they can be printed to any output.


2. Refactor:    //Make the names private, which will help with isolated change,

Person.java

public class Person {
    private String last;
    private String first;
    private String middle;

    public Person(String last, String first, String middle) {
        this.last = last;
        this.first = first;
        this.middle = middle;
    }

    /* Also here we would implement getter and setter methods for each object */
}

PersonClient.java

// The clients are in one file for convenience;
// imagine them as non-test methods in separate client classes.

import junit.framework.TestCase;

import java.io.*

public class PersonClient extends TestCase {
    public PersonClient(String name) {super(name);}

    private void printFirstMiddleLast(Writer out, Person person) throws IOException {    
        out.write(person.first);
        out.write(" ");
        if (person.middle != null) {
            out.write(person.middle);
            out.write(" ");
        }
        out.write(person.last);
    }

    private void printLastFirstMiddleName(Writer out, Person person) throws IOException {         
        out.write(person.getLast());
        out.write(", ");
        out.write(person.getFirst());
        if (person.getMiddle() != null) {
            out.write(" ");
            out.write(person.getMiddle());
        }
    }

    public void testClients() throws IOException {
        Person bobSmith = new Person("Smith", "Bob", null);
        Person jennyJJones = new Person("Jones", "Jenny", "J");
        StringWriter out = new StringWriter();
        printFirstMiddleLast(out, bobSmith);
        assertEquals("Bob Smith", out.toString());

        out = new StringWriter();
        printFirstMiddleLast(out, jennyJJones);
        assertEquals("Jenny J Jones", out.toString());

        out = new StringWriter();
        printLastFirstMiddleName(out, bobSmith);
        assertEquals("Smith, Bob", out.toString());

        out = new StringWriter();
        printLastFirstMiddleName(out, jennyJJones);
        assertEquals("Jones, Jenny J", out.toString());
    }
}





